//other functions of list-merge, sort ,pop_back,pop_front,push_back,push_front

#include<iostream>
#include<list>
using namespace std;

void display(const list<int>& lst) {
    for (const auto& it : lst) {
        cout << it << " ";
    }
    cout << endl;
}

int main(){
  list<int> list1; //empty list of len-0

  list1.push_back(5);
  list1.push_back(7);
  list1.push_back(8);
  list1.push_back(9);
  list1.push_back(2);
  

// using another easy method "using begin() iterator"

    list<int> list1 = {5, 7, 8, 9, 2};  // Initialize list1 with values

    list<int> list2(3);  // Declare list2 with size 3

    auto it = list2.begin();
    *it++ = 45;
    *it++ = 34;
    *it++ = 56;

    display(list1);
    cout << endl;

    display(list2);
    cout << endl;
/*
//EVEN SIMPLER METHOD IS: WITHOUT USING BEGIN()

    list<int> list1 = {5, 7, 8, 9, 2};  // Initialize list1 with values

    list<int> list2 = {45, 34, 56};  // Initialize list2 with values

    display(list1);
    cout << endl;

    display(list2);
    cout << endl;
*/
  return 0;
}


=====================================================================================================================================
//FUNCTIONS:
list-1 : [5 7 8 9 2]
list-2 : [45 34 56]
  // merging before sorting

  //it moves the elements from list2 to list1 and After the merge, list1 takes ownership of all elements that were in list2, and list2 is left empty.

  //MERGE()
    cout<<"merge before sorting: \n";
   list1.merge(list2);
    display(list1);
    cout<<endl;      //[5 7 8 9 2 45 34 56]

    cout<<"list2 is\n";
    display(list2);     []
    cout<<endl;

  //SORTING
  cout<<"sorting list1: \n";
  list1.sort();
  display(list1);  //it is sorting list1 here which consists of all elements of list1 and list2
    //[2 5 7 8 9 34 45 56]

  cout<<" REVERSING A LIST:\n";
  list1.reverse();  //reversing a list
  display(list1);   [56 45 34 9 8 7 5 2]

  //POP-BACK

  cout<<"popping last element:\n";
  list1.pop_back();  // remove ele from rear or back
  display(list1);    //[56 45 34 9 8 7 5]
  cout<<endl;

   cout<<"popping front element:\n";
   list1.pop_front();  //remoce ele from front
   display(list1);     //[45 34 9 8 7 5]
    cout<<endl;

//  REMOVE()
cout<<"removing an element:\n";
  // list1.remove(8); //remove ele from middle
  // display(list1);
  cout<<endl;           //[45 34 9 7 5]


/*
 // case when initially both lists are sorted: 
    cout<<"sorting list-1:\n";
    list1.sort();
    display(list2);
      cout<<endl;
      
    cout<<"sorting list-2:\n";
      list2.sort();
      display(list2);
      cout<<endl;
    
     //merging after sorting
      list1.merge(list2);
      display(list1);
*/

}

=============================================================================================================
Some important list ops:

#include<iostream>
#include<algorithm>
#include<list>
using namespace std;

void explainList(){

    // list<int> ls;

    // ls.push_back(3);
    // ls.push_back(10);
    // ls.emplace_back(4);

    // ls.push_front(77);
    // ls.emplace_front(99);
      cout<<endl;

    // cout<< "the size of this list is: "<< ls.size();

    // ls.pop_back();

    // for(auto it : ls ){
    //     cout<< it <<" ";
    // }
    // cout<<endl;

    /*
    //using clear(),empty() functions: 

    list<int> ls{1,2,3,4};
    ls.clear();

    cout<<ls.empty();

    for(auto it : ls){
        cout<< it <<" ";
    }
    cout<<endl;
    */

   //sort function in list:
    /*
    list<int> ls{9,3,10,1};
    ls.sort();
    for(auto it : ls){
        cout<< it <<" ";
    }
    */


    //SWAP function - V.I
    /*
    list <int> list1{1,2,3,4};
    list <int> list2{55,66,77,88};

    list1.swap(list2);

    cout<<"The first list is: ";
    for(auto it : list1){
        cout<< it <<" ";
    }
    cout<<endl;
    cout<<"The second list is: ";
    for(auto it : list2){
        cout<< it <<" ";
    }
    cout<<endl;
    */


   /*
    // to print last element in the list

   list<int> ls{1,2,3,4};
  
    auto it = ls.end();
    it--;
    cout << *it << " ";

   */

    // to reverse a vector and print it using rbegin() and rend;
    /* 
    list<int> ls{1,2,3,4};
    cout<<"The last element in orginal vector is: "<<ls.back();
    cout<<endl;

    for(auto it = ls.rbegin(); it != ls.rend(); it++){
    cout<< *(it) <<" ";
    }
*/

// list <int> ls{1,2,23,4,67};
// ls.erase(ls.begin());

// for(auto it : ls){
//     cout<< it <<" ";
// }

    //using erase function to erase a specific range(or set) of elements in a list--> v.I
    

    list<int> ls{1,3,4,5,6,7};
    for(auto it =ls.begin(); it!= ls.end(); ++it){

        if(*it % 2 == 0){
            it=ls.erase(it);
        }
        else{
            ++it;
        }
    }
    cout<< "the elements at odd indices are: ";
    for(auto it : ls){
        cout<< it <<" ";
    }

    //using copy function
    /*
    list<int> ls{1,3,4,5,6,7};
    list<int> copy(2,50);
    ls.insert(ls.begin(),copy.begin(),copy.end());
    for(auto it : ls){
        cout<< it <<" ";
    }
    */

}

int main(){
    explainList();
    return 0;
}

========================================================================================================================================================
// difference bertween erase() and remove() 

erase(): Removes elements from a list based on their position.  Can be used to remove a single element or a range of elements.

return value: Returns an iterator pointing to the element that follows the last element removed.

remove(): Removes elements from a list based on their value. Removes all elements that match a specified value.
This function does not return an iterator
ex: list<int> myList = {10, 20, 30, 20, 40};
    myList.remove(20);     // Removes all elements with the value 20

Key Differences
Criteria for Removal: erase() removes elements based on their position, while remove() removes elements based on their value.
Return Type: erase() returns an iterator, whereas remove() does not return anything

