why sometimes we use for(auto& : it) and sometimes we dont use.. for(auto : it)
REASON:



1. **Modifying Elements**: When you need to modify the elements of the container, you should use `auto&` to get a reference to each element. This allows you to change the actual elements in the container.

    
    for (auto& element : lst) {
        cin >> element;  // Modifies the actual elements in the list
    }
    ```

2. **Avoiding Copies**: Using `auto&` avoids making a copy of each element. This is more efficient, especially for containers with large or complex elements, as it avoids the overhead of copying.

3. **Read-Only Access**: If you only need to read the elements and not modify them, you can use `const auto&` to get a constant reference to each element. This ensures that the elements are not accidentally modified.

    ```cpp
    for (const auto& element : lst) {
        cout << element << " ";  // Read-only access
    }
    ```

4. When Not to Use &: If you don't use `&`, `auto` will create a copy of each element. This is useful when you need to work with a copy of the elements and not modify the original container.

    ```cpp
    for (auto element : lst) {
        cout << element << " ";  // Works with a copy of each element
    }
    ```

In summary, use `auto&` when you need to modify the elements or avoid unnecessary copies, and use `const auto&` for read-only access. If you don't need to modify the original elements and are okay with working on copies, you can omit the `&`.
============================

DETAILED EXPLAINATION:

1. Using auto
When you use auto without &, you are working with a copy of each element. This is useful if you don’t need to modify the original elements and are okay with working on copies.

#include <iostream>
#include <vector>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Using auto (works with a copy of each element)
    for (auto element : vec) {
        std::cout << element << " ";  // Prints: 1 2 3 4 5
    }
    std::cout << std::endl;

    return 0;
}
In this example, element is a copy of each value in vec. Any modifications to element won’t affect the original vector.

2. Using auto&
When you use auto&, you are working with a reference to each element. This allows you to modify the original elements in the container.

#include <iostream>
#include <vector>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Using auto& (modifies the actual elements)
    for (auto& element : vec) {
        element *= 2;  // Doubles each element
    }

    // Print modified vector
    for (auto element : vec) {
        std::cout << element << " ";  // Prints: 2 4 6 8 10
    }
    std::cout << std::endl;

    return 0;
}
In this example, element is a reference to each value in vec. Modifying element directly changes the values in the original vector.

3. Using const auto&
When you use const auto&, you are working with a constant reference to each element. This is useful for read-only access, ensuring that the elements are not accidentally modified.

#include <iostream>
#include <vector>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Using const auto& (read-only access)
    for (const auto& element : vec) {
        std::cout << element << " ";  // Prints: 1 2 3 4 5
    }
    std::cout << std::endl;

    return 0;
}
In this example, element is a constant reference to each value in vec. You can read the values, but you cannot modify them.

Summary
auto: Use when you need a copy of each element.
auto&: Use when you need to modify the original elements.
const auto&: Use when you need read-only access to the elements.
