//different ways of declaring and initializing vectors

#include <iostream>
#include<vector>

using namespace std;
void expVec(){
  
//   vector<int>v;
//   v.push_back(1);
//   v.emplace_back(2); 

/*

here if we dont declare size of vector before hand it simply adds that element into the vector, ie., pback [1] , and eback[1,2]
but if we declare size before itself ie., vec(5) then initailly we get null values by default, [0 0 0 0 0] and these pb->1 gets added 
at the back of declared vector dynamically, ie, [0 0 0 0 0 1] for eBack->2 == [0 0 0 0 0 1 2]
hence while using size used pb and eb only when necessary to add something to a vector like a cherry on top

*/

//   vector<pair<int,int>> vec;
//   vec.push_back({1,2});
//   vec.emplace_back(1,2);

  vector<int>vec1(5,100);
//   vector<int>vec2(5);
  vector<int>vec3(vec1);

  // accessing elements
/*
this is the deep understanding syntax of how iterator works
   vector<pair<int,int>>::iterator it = vec.begin();
     vector<int>::iterator it=vec3.begin();
     it++;            //it++ returns next element without this it doent return next elements and v.begin() returns 1st ele only
   cout<<(it->first)<<" "<<it->second;
     cout<<*(it)<<" ";
*/

// for simple and easy access use this instead

for(auto it : vec){
  cout<< it <<endl;
}

/*
If using pairs, use this syntax, since they are pairs:

   for(auto i: vec){
        cout << i.first<<" , " << i.second ;
    }

*/
  
}
int main() {
  expVec();
}
